import View from "./view.js";
import FormView from "./form_view.js";

export default class ListView extends View {
  constructor(storageService, viewModel) {
    super(storageService, viewModel["list"]);
    this.entityViewModel = viewModel;
  }
  //GETTERS AND SETTERS 
  
  get $wrapperContainer() {
    return $("#" + this.viewModel.wrapperContainerId);
  }

  get columns() {
    return this.viewModel.columns;
  } //get columns needed for table
  get $searchInput() {
    return $("#" + this.viewModel.searchInputId);
  }
  get $clearSearchButton() {
    return $("#" + this.viewModel.clearSearchButtonId);
  }
  get $addButton() {
    return $("#" + this.viewModel.addButtonId);
  }
  get $resetButton() {
    return $("#" + this.viewModel.resetButtonId);
  }
  get $deleteModal() {
    return $("#" + this.viewModel.deleteModalContainerId);
  }
  get $editModal() {
    return $("#" + this.viewModel.editModalContainerId);
  }
  get popoversEnabled() {
    return this.viewModel.enablePopovers;
  }
  get formView() {
    return this._formView;
  }
  get entityName() {
    let str = this.entityViewModel.entitySingle;
    return str[0].toUpperCase() + str.substring(1);
  }
  get $headerIcon() {
    return $(`#${this.storage.model.options.sortCol}-${this.storage.model.options.sortDir}`);
  }
  async editItem(itemId) {
    const formView = new FormView(this.storage,this.entityViewModel, this); 
    formView.currentItemId = itemId;

    await formView.renderForm();
    formView.currentItemId = "";
  }

  async createItem() {
    this.editItem(null);
  }

  async bindItemEvents(data) {
    let that = this;
    that.$headerIcon.show();

    //SORTING
    $("th").click(async function() {
      that.$headerIcon.show();
      var clickedCol = $(this).attr("data-name");
      var currentSortDir = that.storage.sortDir;
      if (currentSortDir == "asc") {
        that.storage.sortDir = "desc" 
        that.storage.sortCol = clickedCol;
        that.storage.list()
      }
      else {
        that.storage.sortDir = "asc"
      }
      that.render();
    });
    //POPOVER
    this.initPopover()
    //EDIT MODAL
    let $editModal = this.$editModal;
    $editModal.on("show.bs.modal", async function(ev){
        var button = ev.relatedTarget;
        var teamId = $(button).attr("data-id");
        await that.editItem(teamId);

        if (teamId) {
            var curItem = that.storage.read(teamId);
            curItem.then((response)=> {
              var item = response;
             
              for(const [key, value] of Object.entries(item)){
                var $input = $(`[name='${key}']`);
                $input.attr("value", `${value}`)
              }
            });
        } 
        else {
          let id = that.storage.size + 1; // will be auto generated by DB
        }
      });
  }

  /*bindWrapperEvents()-Bind reset, delete and search events */
  async bindWrapperEvents() {
    var id;
    var that = this;
     
    let $deleteModal = this.$deleteModal;
    $deleteModal.on("show.bs.modal", async function(ev){
      var button = ev.relatedTarget;
        var teamId = $(button).attr("data-id");
        id = teamId;
        var teamName = button.getAttribute("data-name");
        var $modalTitle = $("#modal-trash-title");
        $modalTitle.text(`Delete ${teamName}?`);
      });
    $(document).on("click", "#yesButton", async (e) => {
      await this.deleteListItem(id);
    });

    $(document).on("click", "#resetView", async (e) => {
      this.reset();
    });
    $(document).on("input", "#searchInput", (e) => {
      this.searchVal = $(e.target).val();
      this.runSearch();
    });
    $(document).on("click", "#clearSearch", (e) => {
      $("#searchInput").val("");
      this.storage.filterStr = "";
      that.render();
    });
  }

  /*closeEditModal-close the edit modal,called by form*/
  closeEditModal() {
    this.$editModal.modal("hide");
  }

  /*clearSearch-clear search input and storage filter, re-render*/
  clearSearch() {}
  clearSearchInput() {}
  runSearch() {
    clearTimeout(this.searchWaiter);
    this.searchWaiter = setTimeout(() => {
      if (this.searchVal.length > 1) {
        this.storage.filterStr = this.searchVal;
        this.storage.filterCol = this.storage.sortCol;
        this.renderItem();

      }
      if (this.searchVal.length  == 0 ) {
        this.storage.filterStr = this.searchVal;
        this.storage.list();
        this.renderItem();

      }
    }, 250);
  }

  renderAlert(itemType, itemName) {}
 
  initPopover() {
    let that = this;
    $('[data-bs-toggle="popover"]').popover({
      html: true,
      trigger: 'hover',
      delay:{
        "show":500,
        "hide": 100
      },
      content: function() {
        var index = $(this).attr("data-id");
        let item = that.data[that.storage.getItemIndex(index)];
        let htmlContent = "";
        that.columns.forEach((col, idx) => {
          if (col.popover)
            htmlContent += `<p>${col.label}: ${item[col.name]}</p>`;
        })
        return htmlContent;
      }
    });
  }

  /*UTILITY FUNCTIONS-You can use these if you want*/
  hideSortIcons() {
    $(".toggleIcon").hide();
  }
  showSortIcon(col, dir) {
    $(`#${col}-${dir}`).show();
  }
  hideSortIcon(col, dir) {
    $(`#${col}-${dir}`).hide();
  }

  async deleteListItem(id) {
    await this.storage.delete(id);
    await this.render();
  }

  async updateListItem(id, name, coach_id, league_id, notes, motto) {
    await this.storage.update(id,{
      id,
      name,
      coach_id,
      league_id,
      notes,
      motto,
    });
    await this.render();
  }
}
